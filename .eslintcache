[{"/home/willduiker/code/haypenny/frontend/haypenny/src/index.js":"1","/home/willduiker/code/haypenny/frontend/haypenny/src/reportWebVitals.js":"2","/home/willduiker/code/haypenny/frontend/haypenny/src/App.js":"3","/home/willduiker/code/haypenny/frontend/haypenny/src/Constants/URL.js":"4","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Login.js":"5","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/OpinionContainer.js":"6","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/NavBar.js":"7","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Topic.js":"8","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/OpinionForm.js":"9","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Opinion.js":"10","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/TopicForm.js":"11","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/TopicRouter.js":"12","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/TopicView.js":"13","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/UserRouter.js":"14","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/UserView.js":"15","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Notice.js":"16","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/OpinionRouter.js":"17","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/OpinionView.js":"18","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/CommentForm.js":"19","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Comment.js":"20"},{"size":500,"mtime":1607538178510,"results":"21","hashOfConfig":"22"},{"size":362,"mtime":1607538178524,"results":"23","hashOfConfig":"22"},{"size":4174,"mtime":1608568957213,"results":"24","hashOfConfig":"22"},{"size":105,"mtime":1608830735241,"results":"25","hashOfConfig":"22"},{"size":7718,"mtime":1608151842747,"results":"26","hashOfConfig":"22"},{"size":9487,"mtime":1608831134986,"results":"27","hashOfConfig":"22"},{"size":1377,"mtime":1608227662435,"results":"28","hashOfConfig":"22"},{"size":1713,"mtime":1608227583815,"results":"29","hashOfConfig":"22"},{"size":3869,"mtime":1608821555997,"results":"30","hashOfConfig":"22"},{"size":9511,"mtime":1608757537768,"results":"31","hashOfConfig":"22"},{"size":3579,"mtime":1608065345107,"results":"32","hashOfConfig":"22"},{"size":727,"mtime":1608227426945,"results":"33","hashOfConfig":"22"},{"size":4449,"mtime":1608238299506,"results":"34","hashOfConfig":"22"},{"size":737,"mtime":1608227558397,"results":"35","hashOfConfig":"22"},{"size":5429,"mtime":1608306547256,"results":"36","hashOfConfig":"22"},{"size":2668,"mtime":1608257763761,"results":"37","hashOfConfig":"22"},{"size":741,"mtime":1608570384214,"results":"38","hashOfConfig":"22"},{"size":5508,"mtime":1608755445976,"results":"39","hashOfConfig":"22"},{"size":1875,"mtime":1608591027550,"results":"40","hashOfConfig":"22"},{"size":4372,"mtime":1608757054606,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"7csxf4",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},"/home/willduiker/code/haypenny/frontend/haypenny/src/index.js",[],["90","91"],"/home/willduiker/code/haypenny/frontend/haypenny/src/reportWebVitals.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/App.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Constants/URL.js",["92"],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Login.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/OpinionContainer.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/NavBar.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Topic.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/OpinionForm.js",["93","94","95"],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Opinion.js",["96"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport URLIS from \"../Constants/URL\";\nimport { Link } from \"react-router-dom\";\n\nclass Opinion extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showReact: false,\n      loveOffset: 0,\n      laughOffset: 0,\n      likeOffset: 0,\n      dislikeOffset: 0,\n      angryOffset: 0,\n      confusedOffset: 0,\n      highlight: this.props.highlight,\n      position: 100 + this.props.offset * 100,\n    };\n  }\n  parseDate() {\n    let dateArray = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let splitDate = this.props.opinion.created_at.split(\"T\")[0].split(\"-\");\n    let returnDate =\n      dateArray[parseInt(splitDate[1]) - 1] +\n      \" \" +\n      splitDate[2] +\n      \", \" +\n      splitDate[0];\n\n    return returnDate;\n  }\n\n  componentDidMount() {\n    console.log(this.state.highlight);\n    setTimeout(() => this.changePosition(), 20);\n  }\n\n  changePosition() {\n    let newXPos = this.state.position;\n    newXPos = newXPos - newXPos / 5;\n    if (newXPos < 0.01) {\n      newXPos = 0;\n    } else {\n      setTimeout(() => this.changePosition(), 20);\n    }\n    this.setState({\n      position: newXPos,\n    });\n  }\n\n  handleClick = (e) => {\n    let name = e.target.dataset.name;\n    // debugger\n    let data = {\n      user_id: this.props.user.id,\n      opinion_id: this.props.opinion.id,\n      type: e.target.dataset.name,\n    };\n    let reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    };\n    fetch(URLIS + \"/reaction\", reqObj)\n      .then((resp) => resp.json())\n      .then(() => {\n        this.setState({\n          showReact: false,\n          loveOffset: 0,\n          laughOffset: 0,\n          likeOffset: 0,\n          dislikeOffset: 0,\n          angryOffset: 0,\n          confusedOffset: 0,\n        });\n        switch (name) {\n          case \"LOVE\":\n            this.setState({\n              loveOffset: 1,\n            });\n            break;\n          case \"LAUGH\":\n            this.setState({\n              laughOffset: 1,\n            });\n            break;\n          case \"LIKE\":\n            this.setState({\n              likeOffset: 1,\n            });\n            break;\n          case \"DISLIKE\":\n            this.setState({\n              dislikeOffset: 1,\n            });\n            break;\n          case \"ANGRY\":\n            this.setState({\n              angryOffset: 1,\n            });\n            break;\n          case \"CONFUSED\":\n            this.setState({\n              confusedOffset: 1,\n            });\n            break;\n        }\n      });\n  };\n  toggleReact() {\n    let newReact = this.state.showReact;\n    this.setState({\n      showReact: !newReact,\n    });\n  }\n  renderReactionsTally() {\n    let love = this.props.opinion.reactions.filter((reaction) => {\n      return reaction === \"LOVE\";\n    });\n    let laugh = this.props.opinion.reactions.filter((reaction) => {\n      return reaction === \"LAUGH\";\n    });\n    let like = this.props.opinion.reactions.filter((reaction) => {\n      return reaction === \"LIKE\";\n    });\n    let dislike = this.props.opinion.reactions.filter((reaction) => {\n      return reaction === \"DISLIKE\";\n    });\n    let angry = this.props.opinion.reactions.filter((reaction) => {\n      return reaction === \"ANGRY\";\n    });\n    let confused = this.props.opinion.reactions.filter((reaction) => {\n      return reaction === \"CONFUSED\";\n    });\n    return (\n      <div>\n        {love.length + this.state.loveOffset !== 0 ? (\n          <div>😍 x{love.length + this.state.loveOffset}</div>\n        ) : null}\n        {laugh.length + this.state.laughOffset !== 0 ? (\n          <div>🤣 x{laugh.length + this.state.laughOffset}</div>\n        ) : null}\n        {like.length + this.state.likeOffset !== 0 ? (\n          <div>😊 x{like.length + this.state.likeOffset}</div>\n        ) : null}\n        {dislike.length + this.state.dislikeOffset !== 0 ? (\n          <div>😠 x{dislike.length + this.state.dislikeOffset}</div>\n        ) : null}\n        {angry.length + this.state.angryOffset !== 0 ? (\n          <div>😡 x{angry.length + this.state.angryOffset}</div>\n        ) : null}\n        {confused.length + this.state.confusedOffset !== 0 ? (\n          <div>🤔 x{confused.length + this.state.confusedOffset}</div>\n        ) : null}\n      </div>\n    );\n  }\n\n  renderReactions() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"container-fluid col-md\" style={{ width: \"50%\" }}>\n            <div className=\"row\">\n              <div className=\"col-\">\n                <div\n                  className=\"react-emoji\"\n                  type=\"button\"\n                  data-name=\"LOVE\"\n                  value=\"😍\"\n                  onClick={(e) => this.handleClick(e)}\n                >\n                  😍\n                </div>\n              </div>\n              <div className=\"col-\">\n                <div\n                  className=\"react-emoji\"\n                  type=\"button\"\n                  data-name=\"LAUGH\"\n                  value=\"🤣\"\n                  onClick={(e) => this.handleClick(e)}\n                >\n                  🤣\n                </div>\n              </div>\n              <div className=\"col-\">\n                <div\n                  className=\"react-emoji\"\n                  type=\"button\"\n                  data-name=\"LIKE\"\n                  value=\"😊\"\n                  onClick={(e) => this.handleClick(e)}\n                >\n                  😊\n                </div>\n              </div>\n              <div className=\"col-\">\n                <div\n                  className=\"react-emoji\"\n                  type=\"button\"\n                  data-name=\"DISLIKE\"\n                  value=\"😠\"\n                  onClick={(e) => this.handleClick(e)}\n                >\n                  😠\n                </div>\n              </div>\n              <div className=\"col-\">\n                <div\n                  className=\"react-emoji\"\n                  type=\"button\"\n                  data-name=\"ANGRY\"\n                  value=\"😡\"\n                  onClick={(e) => this.handleClick(e)}\n                >\n                  😡\n                </div>\n              </div>\n              <div className=\"col-\">\n                <div\n                  className=\"react-emoji\"\n                  type=\"button\"\n                  data-name=\"CONFUSED\"\n                  value=\"🤔\"\n                  onClick={(e) => this.handleClick(e)}\n                >\n                  🤔\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderReactButton() {\n    return (\n      <React.Fragment>\n        <React.Fragment>\n          {this.state.showReact ? this.renderReactions() : null}\n        </React.Fragment>\n        <button\n          className=\"btn btn-primary\"\n          style={{ margin: \"20px\" }}\n          onClick={() => this.toggleReact()}\n        >\n          React\n        </button>\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    //debugger\n    return (\n      <div\n        className={`card ${this.props.highlight ? \"highlighted\" : \"\"}`}\n        style={{\n          margin: \"1%\",\n          opacity: `${(100 - this.state.position) / 100}`,\n          position: \"relative\",\n          right: `${this.state.position}%`,\n        }}\n      >\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-xl-8\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">\n                  On the topic of{\" \"}\n                  <Link\n                    to={`/topic/${this.props.opinion.topic}`}\n                    style={{ fontFamily: \"Nokio Medium\" }}\n                  >\n                    {this.props.opinion.topic}\n                  </Link>\n                </h5>\n                <div>{this.props.opinion.content}</div>\n                <div>\n                  ~\n                  <Link to={`/user/${this.props.opinion.user}`}>\n                    {this.props.opinion.user}\n                  </Link>\n                  , {this.parseDate()}\n                </div>\n                <div>\n                  <div>\n                    {this.props.user.name !== \"\"\n                      ? this.renderReactButton()\n                      : null}\n                    <Link\n                      to={`/opinion/view/${this.props.opinion.id}`}\n                      className=\"btn btn-primary\"\n                    >\n                      Take a Closer Look\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-sm-4\">\n              <div className=\"card-body\">\n                <h6 className=\"card-title\">Reactions</h6>\n                <div className=\"card-text reaction-box\">\n                  {this.renderReactionsTally()}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (user) => dispatch({ type: \"LOGIN\", user: user }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Opinion);\n","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/TopicForm.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/TopicRouter.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/TopicView.js",["97"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport URLIS from \"../Constants/URL\";\nimport Opinion from \"./Opinion\";\nimport OpinionForm from \"./OpinionForm\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport ReactWordcloud from \"react-wordcloud\";\n\nfunction TopicView(props) {\n  const location = useLocation();\n  let { topicTitle } = useParams();\n  const prevLocation = usePrevious(location);\n  const [opinions, setOpinions] = useState(0);\n  const [topicId, setTopicId] = useState(0);\n  const [page, setPage] = useState(1);\n  const [lastPage, setLastPage] = useState(false);\n  const [sort, setSort] = useState(\"new\");\n  const [loadOpinions, setLoadOpinions] = useState(true)\n  const [wordCloud, setWordCloud] = useState([]);\n\n  useEffect(() => {\n    if (loadOpinions || location !== prevLocation) {\n      setLoadOpinions(false)\n      fetch(URLIS + `/topic/${topicTitle}/opinions/${sort}/${page}`)\n        .then((resp) => resp.json())\n        .then((message) => {\n          setTopicId(message.topic);\n          setOpinions(message.opinions);\n          setLastPage(message.last);\n        });\n      if (wordCloud.length === 0) {\n        fetch(URLIS + `/topic/${topicTitle}/wordcloud/40`)\n          .then((resp) => resp.json())\n          .then((cloud) => {\n            setWordCloud(cloud);\n          });\n      }\n    }\n  });\n  function renderOpinions() {\n    if (opinions !== 0) {\n      let count = 0;\n      return opinions.map((opinion) => {\n        count += 1;\n        return <Opinion key={count} offset={count / 4} opinion={opinion} />;\n      });\n    }\n  }\n  function handleSortChange(e) {\n    e.preventDefault();\n    debugger;\n    if (sort !== e.target.name) {\n      setOpinions(0);\n      setLoadOpinions(true)\n      setPage(1);\n      setLastPage(false);\n      setSort(e.target.name);\n    }\n  }\n  function simpleWordCloud() {\n    return (\n      <ReactWordcloud\n        options={{ rotations: 0, rotationAngles: [0] }}\n        words={wordCloud}\n      />\n    );\n  }\n  function loadNextPage() {\n    let newPage = page + 1;\n    setPage(newPage);\n    fetch(URLIS + `/topic/${topicTitle}/opinions/${sort}/${newPage}`)\n      .then((resp) => resp.json())\n      .then((message) => {\n        console.log(message);\n        let newOpinions = [...opinions, ...message.opinions];\n        setOpinions(newOpinions);\n        setLastPage(message.last);\n      });\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md\">\n            <h2\n              className=\"card-title\"\n              style={{ textAlign: \"center\", paddingTop: \"20px\" }}\n            >\n              {topicTitle}\n            </h2>\n            <div className=\"col-md\">{simpleWordCloud()}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container\" style={{ textAlign: \"center\" }}>\n        <form>\n          <button\n            className=\"btn btn-secondary\"\n            name=\"new\"\n            onClick={(e) => handleSortChange(e)}\n          >\n            New\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            name=\"popular\"\n            onClick={(e) => handleSortChange(e)}\n          >\n            Popular\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            name=\"weird\"\n            onClick={(e) => handleSortChange(e)}\n          >\n            Weird\n          </button>\n        </form>\n      </div>\n      <div className=\"card-body\">\n        <OpinionForm topic={{ title: topicTitle, id: topicId }} />\n      </div>\n      <h4 style={{ textAlign: \"center\" }}>\n        {opinions !== 0 ? \"All Opinions\" : null}\n      </h4>\n      <div className=\"card-body\">{renderOpinions()}</div>\n      <div className=\"card-body\" style={{ textAlign: \"center\" }}>\n        {lastPage ? null : (\n          <button className=\"btn btn-primary\" onClick={() => loadNextPage()}>\n            Load More\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\nfunction usePrevious(value) {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (user) => dispatch({ type: \"LOGIN\", user: user }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TopicView);\n","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/UserRouter.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/UserView.js",["98"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport URLIS from \"../Constants/URL\";\nimport Opinion from \"./Opinion\"\nimport {\n  useParams,\n  useLocation,\n} from \"react-router-dom\";\nimport ReactWordcloud from \"react-wordcloud\";\n\nfunction UserView(props) {\n  const location = useLocation();\n  let { userName } = useParams();\n  const prevLocation = usePrevious(location);\n  const [opinions, setOpinions] = useState(0);\n  const [lastPage, setLastPage] = useState(false);\n  const [page, setPage] = useState(1);\n  const [wordCloud, setWordCloud] = useState([]);\n  const [sort, setSort] = useState(\"new\");\n  const [popularity, setPopularity] = useState(-3.14);\n  const [weird, setWeird] = useState(0);\n  const [loadCloud, setLoadCloud] = useState(true)\n  const [loadOpinions, setLoadOpinions] = useState(true)\n\n  useEffect(() => {\n    if (popularity === -3.14) {\n      fetch(URLIS + `/user/${userName}`)\n        .then((resp) => resp.json())\n        .then((message) => {\n          setPopularity(message.popularity);\n          setWeird(message.weird);\n        });\n    }\n    if (location !== prevLocation) {\n      fetch(URLIS + `/user/${userName}/wordcloud/40`)\n          .then((resp) => resp.json())\n          .then((cloud) => {\n            \n            setWordCloud(cloud);\n          });\n      setLoadOpinions(true)\n      setLoadCloud(true)\n      setPopularity(-3.14)\n    }\n    if (loadOpinions || location !== prevLocation) {\n      setLoadOpinions(false)\n      console.log('test')\n      fetch(URLIS + `/user/${userName}/opinions/${sort}/${page}`)\n        .then((resp) => resp.json())\n        .then((message) => {\n          //debugger\n          setOpinions(message.opinions);\n          setLastPage(message.last);\n        });\n      if (loadCloud) {\n        console.log('test 2')\n        setLoadCloud(false)\n        fetch(URLIS + `/user/${userName}/wordcloud/40`)\n          .then((resp) => resp.json())\n          .then((cloud) => {\n            setWordCloud(cloud);\n          });\n      }\n    }\n  });\n\n  function loadNextPage() {\n    let newPage = page + 1;\n    setPage(newPage);\n    fetch(URLIS + `/user/${userName}/opinions/${sort}/${newPage}`)\n      .then((resp) => resp.json())\n      .then((message) => {\n      \n        let newOpinions = [...opinions, ...message.opinions];\n        setOpinions(newOpinions);\n        setLastPage(message.last);\n      });\n  }\n\n  function renderOpinions() {\n    if (opinions !== 0) {\n      let count = 0;\n      return opinions.map((opinion) => {\n        count += 1;\n        return (\n          <React.Fragment>\n            <Opinion key={count} offset={count/4} opinion={opinion} />\n          </React.Fragment>\n        );\n      });\n    }\n  }\n\n  function handleSortChange(e) {\n    e.preventDefault();\n    debugger;\n    if (sort !== e.target.name) {\n      setLoadOpinions(true)\n      setOpinions(0);\n      setPage(1);\n      setLastPage(false);\n      setSort(e.target.name);\n    }\n  }\n\n  function simpleWordCloud() {\n    return (\n      <ReactWordcloud\n        options={{ rotations: 0, rotationAngles: [0] }}\n        words={wordCloud}\n      />\n    );\n  }\n  return (\n    <div className=\"card\">\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md\">\n            <h2\n              className=\"card-title\"\n              style={{ textAlign: \"center\", paddingTop: \"20px\" }}\n            >\n              {userName}\n            </h2>\n            <h4\n              className=\"card-title\"\n              style={{ textAlign: \"center\", paddingTop: \"20px\" }}\n            >\n              Popularity: {<b style={{color: `${popularity > 0 ? \"green\" : \"red\"}`}}>{popularity}</b>}\n            </h4>\n            <h4\n              className=\"card-title\"\n              style={{ textAlign: \"center\", paddingTop: \"20px\" }}\n            >\n              Weirdness: {<b style={{color: `${weird > 0 ? \"green\" : \"red\"}`}}>{weird}</b>}\n            </h4>\n          </div>\n          <div className=\"col-md\">{simpleWordCloud()}</div>\n        </div>\n      </div>\n      <div className=\"container\" style={{textAlign: 'center'}}>\n        <form>\n          <button\n            className=\"btn btn-secondary\"\n            name=\"new\"\n            onClick={(e) => handleSortChange(e)}\n          >\n            New\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            name=\"popular\"\n            onClick={(e) => handleSortChange(e)}\n          >\n            Popular\n          </button>\n          <button\n            className=\"btn btn-secondary\"\n            name=\"weird\"\n            onClick={(e) => handleSortChange(e)}\n          >\n            Weird\n          </button>\n        </form>\n      </div>\n      <div className=\"card-body\">{renderOpinions()}</div>\n      <div className=\"card-body\" style={{ textAlign: \"center\" }}>\n        {lastPage ? null : (\n          <button className=\"btn btn-primary\" onClick={() => loadNextPage()}>\n            Load More\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (user) => dispatch({ type: \"LOGIN\", user: user }),\n  };\n};\n\nfunction usePrevious(value) {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserView);\n","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Notice.js",["99","100"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport URLIS from \"../Constants/URL\";\nimport MediaQuery from \"react-responsive\";\n\nclass Notice extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirm: false\n    };\n}\n\n  renderNotice() {\n    return (\n      <div className=\"card-body\" style={{ textAlign: \"center\" }}>\n        <h2 className=\"card-title\">IMPORTANT NOTICE</h2>\n        <div className=\"container\">\n            <div className=\"card\">\n            <p>If you're seeing this message you probably know me, in that case, please remember that this app will be shown to future employers.\n            Because of that, please be mindful of the language and content in your posts! All posts are subject to removal at my discretion,\n            so be good!</p>\n            <p>While using this, feel free to log in, create Topics and Opinions, React to Opinions, and scope out what others have to say!</p>\n            <p>If you're an employer visting and this notice isn't down (Or you're scoping my Git Repo) then welcome! This project was\n                built with a Rails backend and a React Frontend. The CSS is courtesy of Bootstrap with a little custom work thrown in for taste.\n                It also looks good on a phone!\n            </p>\n            <p>You might be interested in some of my other projects!</p>\n            <p>A Javascript Sequencer called <a href=\"http://dcccviii.herokuapp.com/\">DCCCVIII</a> made in collaboration with Mike Sapienza and Tom Bigelow</p>\n            <p>A pure Javascript game engine called <a href=\"https://github.com/thesebonesalone/BonkersJs\">BonkersJS</a> that is being updated regularly.</p>\n            <p>Or my blog <a href=\"https://duikhead2.medium.com/\">here!</a></p>            \n            <p>Have fun!</p>\n             \n             </div>\n            <h3>~Will</h3>\n        </div>\n        </div>\n    );\n  }\n\n  handleDismiss() {\n      this.props.dismiss()\n      this.props.storeDismiss()\n  }\n  render() {\n    return (\n      <React.Fragment>\n          <div className=\"overlay card container-fluid\" style={{height: 'auto'}}>\n            <button\n              className=\"btn-danger exit\"\n              onClick={() => this.handleDismiss()}\n            >\n              X\n            </button>\n            {this.renderNotice()}\n          </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { notice: state.notice };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    storeDismiss: () => dispatch({ type: \"DISMISS_NOTICE\"}),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notice);\n","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/OpinionRouter.js",[],"/home/willduiker/code/haypenny/frontend/haypenny/src/Components/OpinionView.js",["101","102","103"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport URLIS from \"../Constants/URL\";\nimport Opinion from \"./Opinion\";\nimport { useParams, useLocation } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\n\nfunction OpinionView(props) {\n  let { opinionId } = useParams();\n  const [opinion, setOpinion] = useState({ id: 0 });\n  const [title, setTitle] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [oldOpinions, setOldOpinions] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [userComments, setUserComments] = useState([]);\n  const prevOpinion = usePrevious(opinionId);\n  const [page,setPage] = useState(1)\n  const [last, setLast] = useState(false)\n  const [loading, setLoading] = useState(false)\n  useEffect(() => {\n    if (prevOpinion !== opinionId) {\n      setOpinion({ id: 0 });\n      setComments([])\n      setPage(1)\n      setLast(false)\n      setLoading(false)\n      getCommentsPage(1)\n    }\n    if (opinion.id === 0) {\n      setOpinion({ id: -1 });\n      fetch(URLIS + `/opinion/view/${opinionId}`)\n        .then((resp) => resp.json())\n        .then((message) => {\n          console.log(message);\n          setTitle(message.title);\n          setUsername(message.username);\n          setOpinion(message.opinion);\n          setOldOpinions(message.oldOpinions);\n        });\n      if (props.user.name !== \"\") {\n        fetch(\n          URLIS + `/comment/useropinioncomments/${opinionId}/${props.user.id}`\n        )\n          .then((resp) => resp.json())\n          .then((message) => {\n            setUserComments(message.comments);\n          });\n      }\n      getCommentsPage(page)\n      // fetch(URLIS + `/comment/opinioncomments/${opinionId}`)\n      //   .then((resp) => resp.json())\n      //   .then((message) => {\n      //     console.log(message);\n      //     setComments(message.comments);\n      //   });\n    }\n  });\n\n\n  function getCommentsPage(page){\n    fetch(URLIS + `/comment/opinioncomments/${opinionId}/${page}`)\n    .then(resp => resp.json())\n    .then(message => {\n      let newComments = comments\n      setComments(newComments.concat(message.comments))\n      setLast(message.last)\n      setLoading(false)\n    })\n  }\n\n  function renderOldOpinions() {\n    let count = 0;\n    return oldOpinions.map((subOpinion) => {\n      count += 1;\n      return <Opinion highlight={subOpinion.id === parseInt(opinionId)} key={count} offset={count / 4} opinion={subOpinion} />;\n    });\n  }\n\n  function renderComments() {\n    let count = 0;\n    return comments.map((comment) => {\n      count += 1;\n      if (comment.user !== props.user.name) {\n      return (\n        <div className=\"col-md\">\n          <Comment userOwned={false} key={count} comment={comment} />\n        </div>\n      );\n      } else {\n          return null\n      }\n    });\n  }\n\n  function renderUserComments() {\n    let count = 0;\n    return userComments.map((comment) => {\n      count += 1;\n      return (\n        <div className=\"col-md\">\n          <Comment userOwned={true} key={count} comment={comment} />\n        </div>\n      );\n    });\n  }\n  function handleLoadComments(){\n    if (!loading){\n      let newPage = page + 1\n      setPage(newPage)\n      getCommentsPage(newPage)\n    }\n  }\n\n  function renderUserCommentsDiv() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-md\">\n          <h2> Your Comments</h2>\n          {renderUserComments()}\n        </div>\n      </div>\n    );\n  }\n  function renderCommentsButton(){\n    if (last || comments.length === 0) {\n      return null\n    } else {\n      return (\n        <div><button className=\"btn btn-secondary\" onClick={() => handleLoadComments()}>Load More Comments</button></div>\n      )\n    }\n  }\n\n  function addCommentToStable(comment) {\n      console.log(comment)\n    let newUserComments = userComments.concat([comment])\n      setUserComments(newUserComments)\n  }\n\n  function renderOpinion() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md\">\n            <h2 className=\"card-title\">\n              {oldOpinions.length > 1\n                ? `What ${username} thinks about ${title}`\n                : null}\n            </h2>\n            {renderOldOpinions()}\n          </div>\n        </div>\n        {props.user.name !== \"\" && userComments.length > 0 ? renderUserCommentsDiv() : null}\n        <div className=\"row\">\n          <div className=\"col-md\">\n            <h2> Comments</h2>\n            <div className=\"card\">\n              {props.user.name !== \"\" ? (\n                <CommentForm addCommentToStable={(comment) => addCommentToStable(comment)} opinionId={opinion.id} />\n              ) : null}\n            </div>\n\n            {renderComments()}\n            {renderCommentsButton()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <React.Fragment>\n      <div className=\"card\"></div>\n\n      <div>{opinion.id !== 0 ? renderOpinion() : null}</div>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (user) => dispatch({ type: \"LOGIN\", user: user }),\n  };\n};\n\nfunction usePrevious(value) {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OpinionView);\n","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/CommentForm.js",["104"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport URLIS from \"../Constants/URL\";\nimport Opinion from \"./Opinion\";\n\nclass CommentForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      comment: \"\",\n    };\n  }\n\n  handleChange(e) {\n    this.setState({\n      comment: e.target.value,\n    });\n  }\n  handleSubmit(e) {\n      e.preventDefault()\n      if (this.state.comment !== '') {\n         let data = {user_id: this.props.user.id, opinion_id: this.props.opinionId, content: this.state.comment}\n         let reqObj = {\n             method: \"POST\",\n             headers: {\n                 \"Content-Type\": \"application/json\"\n             },\n             body: JSON.stringify(data),\n         }\n         fetch(URLIS + \"/comment\", reqObj)\n         .then((resp) => resp.json())\n         .then((message) => {\n            console.log(message)\n            this.setState({\n                comment: \"\"\n            })\n            this.props.addCommentToStable(message.comment)\n         })\n    \n\n\n      }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <form onSubmit={(e) => this.handleSubmit(e)}>\n          <div>\n            <input\n              className=\"input-lg\"\n              type=\"text\"\n              style={{ width: \"95%\", margin: \"2.5%\"}}\n              placeholder=\"Leave a comment\"\n              value={this.state.comment}\n              onChange={(e) => this.handleChange(e)}\n            />\n          </div>\n          <input type=\"submit\" className=\"btn btn-primary\"/>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (user) => dispatch({ type: \"LOGIN\", user: user }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentForm);\n","/home/willduiker/code/haypenny/frontend/haypenny/src/Components/Comment.js",["105"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport URLIS from \"../Constants/URL\";\nimport { Link } from \"react-router-dom\";\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n    let date = new Date(this.props.comment.created_at);\n    let arrayDate = date.toString().split(\" \");\n    let parseDate = [arrayDate[1], arrayDate[2], arrayDate[3]].join(\" \");\n    this.state = {\n      parseDate: parseDate,\n      userHasVote: false,\n      userVoteId: 0,\n      voteTally: 0,\n      voteOffset: 0,\n      votes: this.props.comment.votes,\n      hide: false,\n    };\n  }\n  componentDidMount() {\n    if (this.props.user.name !== \"\") {\n      let uservote = this.state.votes.filter((vote) => {\n        return vote.user_id === this.props.user.id;\n      });\n      if (uservote.length > 0) {\n        this.setState({\n          userHasVote: true,\n          userVoteId: uservote[0].id,\n        });\n      }\n    }\n    this.tallyVotes();\n  }\n\n  tallyVotes() {\n    let count = 0;\n    this.state.votes.forEach((vote) => {\n      count += vote.value;\n    });\n    count -= this.setState({\n      voteTally: count,\n    });\n  }\n  handleUpvote() {\n    this.sendVote(1);\n  }\n  handleDownvote() {\n    this.sendVote(-1);\n  }\n\n  sendVote(value) {\n    let data = {\n      comment_id: this.props.comment.id,\n      user_id: this.props.user.id,\n      value: value,\n    };\n    let reqObj = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    };\n\n    fetch(URLIS + \"/vote\", reqObj)\n      .then((resp) => resp.json())\n      .then((message) => {\n        console.log(message);\n        if (this.state.userHasVote) {\n          let newVotes = this.state.votes;\n          let count = 0;\n          newVotes.forEach((vote) => {\n            if (vote.id === this.state.userVoteId) {\n              newVotes[count].value = value;\n            }\n            count += 1;\n          });\n          this.setState({\n            votes: newVotes,\n          });\n          this.tallyVotes();\n        } else {\n          this.setState({\n            voteOffset: value,\n          });\n        }\n      });\n  }\n\n  handleDelete() {\n    let reqObj = {\n      method: \"DELETE\",\n    };\n    fetch(URLIS + `/comment/${this.props.comment.id}`, reqObj)\n      .then((resp) => resp.json())\n      .then((message) => {\n        console.log(message);\n        this.setState({\n          hide: true,\n        });\n      });\n  }\n\n  renderDelete() {\n    return (\n      <button className=\"btn-danger exit\" onClick={() => this.handleDelete()}>\n        X\n      </button>\n    );\n  }\n  renderComment() {\n    return (\n      <div className=\"card\">\n        <h5 className=\"card-title\" style={{ margin: \"1%\" }}>\n          <Link to={`/user/${this.props.comment.user}`}>\n            {this.props.comment.user}\n          </Link>{\" \"}\n          on {this.state.parseDate}\n        </h5>\n\n        <div className=\"container-fluid\">\n          <div className=\"row\" style={{ margin: \"1%\" }}>\n            <div className=\"col-\" style={{ margin: \"1%\" }}>\n              <div className=\"react-emoji\" onClick={() => this.handleUpvote()}>\n                👍\n              </div>\n              <div\n                className=\"react-emoji\"\n                onClick={() => this.handleDownvote()}\n              >\n                👎\n              </div>\n            </div>\n            <div\n              className=\"col- \"\n              style={{ margin: \"1%\", textAlign: \"center\" }}\n            >\n              <div className=\"center\">\n                Score: {this.state.voteTally - this.state.voteOffset}\n              </div>\n            </div>\n\n            <div className=\"col col-lg\">\n              <div className=\"card-body\">\n                <div>{this.props.comment.content}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div>{this.props.userOwned ? this.renderDelete() : null}</div>\n      </div>\n    );\n  }\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.hide ? null : this.renderComment()}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { user: state.user };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (user) => dispatch({ type: \"LOGIN\", user: user }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);\n",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":1,"column":1,"nodeType":"112","endLine":1,"endColumn":63},{"ruleId":"113","severity":1,"message":"114","line":1,"column":28,"nodeType":"115","messageId":"116","endLine":1,"endColumn":36},{"ruleId":"113","severity":1,"message":"117","line":1,"column":38,"nodeType":"115","messageId":"116","endLine":1,"endColumn":47},{"ruleId":"113","severity":1,"message":"118","line":1,"column":49,"nodeType":"115","messageId":"116","endLine":1,"endColumn":55},{"ruleId":"119","severity":1,"message":"120","line":92,"column":9,"nodeType":"121","messageId":"122","endLine":123,"endColumn":10},{"ruleId":"123","severity":1,"message":"124","line":21,"column":3,"nodeType":"115","endLine":21,"endColumn":12,"suggestions":"125"},{"ruleId":"123","severity":1,"message":"126","line":25,"column":3,"nodeType":"115","endLine":25,"endColumn":12,"suggestions":"127"},{"ruleId":"113","severity":1,"message":"128","line":3,"column":8,"nodeType":"115","messageId":"116","endLine":3,"endColumn":13},{"ruleId":"113","severity":1,"message":"129","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":18},{"ruleId":"113","severity":1,"message":"130","line":5,"column":21,"nodeType":"115","messageId":"116","endLine":5,"endColumn":32},{"ruleId":"113","severity":1,"message":"131","line":6,"column":10,"nodeType":"115","messageId":"116","endLine":6,"endColumn":14},{"ruleId":"123","severity":1,"message":"132","line":22,"column":3,"nodeType":"115","endLine":22,"endColumn":12,"suggestions":"133"},{"ruleId":"113","severity":1,"message":"134","line":4,"column":8,"nodeType":"115","messageId":"116","endLine":4,"endColumn":15},{"ruleId":"113","severity":1,"message":"135","line":43,"column":18,"nodeType":"115","messageId":"116","endLine":43,"endColumn":23},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"import/no-anonymous-default-export","Assign literal to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoadOpinions'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loadOpinions, location, prevLocation, topicTitle, sort, page, wordCloud.length] as a second argument to the useEffect Hook.",["138"],"React Hook useEffect contains a call to 'setPopularity'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [popularity, location, prevLocation, loadOpinions, userName, sort, page, loadCloud] as a second argument to the useEffect Hook.",["139"],"'URLIS' is defined but never used.","'MediaQuery' is defined but never used.","'useLocation' is defined but never used.","'Link' is defined but never used.","React Hook useEffect contains a call to 'setOpinion'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [prevOpinion, opinionId, opinion.id, getCommentsPage, props.user.name, props.user.id, page] as a second argument to the useEffect Hook.",["140"],"'Opinion' is defined but never used.","'count' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Add dependencies array: [loadOpinions, location, prevLocation, topicTitle, sort, page, wordCloud.length]",{"range":"147","text":"148"},"Add dependencies array: [popularity, location, prevLocation, loadOpinions, userName, sort, page, loadCloud]",{"range":"149","text":"150"},"Add dependencies array: [prevOpinion, opinionId, opinion.id, getCommentsPage, props.user.name, props.user.id, page]",{"range":"151","text":"152"},[1385,1385],", [loadOpinions, location, prevLocation, topicTitle, sort, page, wordCloud.length]",[2038,2038],", [popularity, location, prevLocation, loadOpinions, userName, sort, page, loadCloud]",[2011,2011],", [prevOpinion, opinionId, opinion.id, getCommentsPage, props.user.name, props.user.id, page]"]